{
  "createdAt": "2025-07-15T12:07:19.822Z",
  "updatedAt": "2025-07-17T12:00:01.000Z",
  "id": "NvgM86eUEwCjHBck",
  "name": "Inventory Question Dev Sara SearchIAcopy",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=[INST]\nYou are given a CSV data snippet, a column header description, and a natural language question from the user.\n\nYour task is:\n1. Extract the most relevant nouns or item names from the question — ignore all verbs, articles, prepositions, and filler words.\n2. Insert those keywords directly into the Python script.\n3. Return ONLY the final Python script (see format below). The keywords must be explicitly defined in the `keywords = [...]` line.\n\n### [Table Text]\nThis is the description of the cols of the table:  \n{{ JSON.stringify($json.headers) }}\n\n### [Table]\n{{ $json.rowsCsv }}\n\n### [Question]\n{{ $json.question }}\n\n### [Instructions]\nYour response must follow these constraints:\n- Return ONLY the Python script, and nothing else.\n- DO NOT include any explanations, reasoning, markdown formatting, or comments unless they are part of the original script.\n- You are not allowed to include ANY explanations, thoughts, reasoning, or Markdown formatting.\n- The code you return will be directly saved into a .py file and executed. Therefore, it must be valid Python.\n- You are only allowed to solve the question using the EXACT Python script shown below in [Python Script Template].\n- DO NOT alter or add anything to the script.\n- DO NOT wrap the code in triple backticks. Return only raw code.\n- Return ONLY the exact Python script as plain text, and nothing else. Do NOT wrap it in python.\n\n### [Python Script Template] — DO NOT MODIFY FORMAT\n\n```python\nimport pandas as pd\n\nkeywords = [] # ← Replace with extracted relevant nouns form the {{ $json.question }}\n\ndf = pd.read_csv('data.csv')\n\ndef matches_keywords(name):\n    name = str(name).lower()\n    return any(word in name for word in keywords)  # Coincidencia parcial\n\nfiltered_df = df[df['Name'].apply(matches_keywords)]\n\nif not filtered_df.empty:\n    result = filtered_df.to_dict('records')\nelse:\n    result = \"UNKNOWN\"\n\nprint(result)\n```\n\n[/INST]\n",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        360,
        -200
      ],
      "id": "92c0cd81-2615-45f3-8893-37af83d3eda7",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "workspaceId": "013a4efa-1bce-43cf-88bc-faf921d516be",
        "databaseId": "f0dc0899-6864-46bc-ad79-4c44effb9850",
        "returnAll": true,
        "simplify": false
      },
      "type": "n8n-nodes-appflowy.appflowy",
      "typeVersion": 1,
      "position": [
        -80,
        -200
      ],
      "id": "4a95f4d1-b2d0-46c0-9364-346743f6814e",
      "name": "Get All Inventory",
      "credentials": {
        "appflowyApi": {
          "id": "caTURWHOYl4VW0ZV",
          "name": "Dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "getFields",
        "workspaceId": "013a4efa-1bce-43cf-88bc-faf921d516be",
        "databaseId": "f0dc0899-6864-46bc-ad79-4c44effb9850"
      },
      "type": "n8n-nodes-appflowy.appflowy",
      "typeVersion": 1,
      "position": [
        -520,
        -200
      ],
      "id": "0f48fc00-b314-480d-9225-27a03f89790a",
      "name": "Get Inventory Headers",
      "credentials": {
        "appflowyApi": {
          "id": "caTURWHOYl4VW0ZV",
          "name": "Dev"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nvar data = $('Code').first().json\ndata.rows = [];\ndata.rowsCsv = \"\";\n\n//Add to struct\nfor (const item of $input.all()) {\n  data.rows.push(item.json) \n}\n\n//Clean\nfor (var i = 0; i < data.rows.length; i++) {\n  aux = data.rows[i].id; \n  data.rows[i] = data.rows[i].cells; \n  data.rows[i].id = aux; \n}\n\n//Add headers to csv\nfor (var i = 0; i < data.headers.length; i++) {\n  data.rowsCsv += data.headers[i].name;\n  if (i != data.headers.length - 1) data.rowsCsv += \",\"\n}\ndata.rowsCsv += \"\\n\"\n\n//Add rows to csv\nfor (var i = 0; i < data.rows.length; i++) {\n  for (var j = 0; j < data.headers.length; j++) {\n    data.rowsCsv += data.rows[i][data.headers[j].name];\n    if (j != data.headers.length - 1) data.rowsCsv += \",\"\n  }\n  data.rowsCsv += \"\\n\"\n} \n\ndata.question = $('When chat message received').first().json.chatInput\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        -200
      ],
      "id": "63cb114f-cc2e-4bf0-8857-86d82122e954",
      "name": "Gen promt",
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nvar data = {}\ndata.headers = [];\n\nfor (const item of $input.all()) {\n  data.headers.push(item.json) \n}\nfor (var i = 0; i < data.headers.length; i++) {\n  delete data.headers[i].id ;\n  delete data.headers[i].is_primary ;\n  data.headers[i].options = [];\n  if (data.headers[i].field_type == \"SingleSelect\") {\n    for (var j = 0; j < data.headers[i].type_option.content.options.length; j++) {\n      data.headers[i].options.push(data.headers[i].type_option.content.options[j].name);\n    }\n    delete data.headers[i].type_option ;\n  }\n}\ndata.headers.push({\n  \"name\": \"id\",\n  \"field_type\":\"SingleSelect\",\n  \"options\": \"null\"\n});\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -300,
        -200
      ],
      "id": "98f0917a-ac46-4ff1-8597-2ee9a284ff3a",
      "name": "Code"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hello, just ask a question about the inventory.",
        "options": {
          "allowFileUploads": false,
          "inputPlaceholder": "Type your question..",
          "loadPreviousSession": "memory",
          "responseMode": "lastNode",
          "showWelcomeScreen": false,
          "subtitle": "Inventory Chat subtitle",
          "title": "Inventory Chat title",
          "customCss": "<style>\n:root {\n  --chat--color-primary: #78B9B5;\n  --chat--color-primary-shade-50: #63a7a3;\n  --chat--color-primary-shade-100: #4e9491;\n  --chat--color-secondary: #0F828C;\n  --chat--color-secondary-shade-50: #0d6e76;\n\n  --chat--color-white: #f0f0f0;\n  --chat--color-light: #1b1c2e;\n  --chat--color-light-shade-50: #262738;\n  --chat--color-light-shade-100: #33354d;\n  --chat--color-medium: #4a5568;\n  --chat--color-dark: #0e0f1a;\n  --chat--color-disabled: #6b7280;\n  --chat--color-typing: #94a3b8;\n\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.75rem;\n  --chat--transition-duration: 0.25s;\n  --chat--font-family: (\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen-Sans,\n    Ubuntu,\n    Cantarell,\n    'Helvetica Neue',\n    sans-serif\n  );\n\n  --chat--window--width: 420px;\n  --chat--window--height: 640px;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--window--border-radius: var(--chat--border-radius);\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  --chat--header-height: auto;\n  --chat--header--padding: 1.25rem;\n  --chat--header--background: #320A6B;\n  --chat--header--color: var(--chat--color-white);\n  --chat--heading--font-size: 1.5rem;\n  --chat--subtitle--font-size: 1rem;\n  --chat--subtitle--line-height: 1.6;\n\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: 0.875rem 1rem;\n  --chat--message--border-radius: var(--chat--border-radius);\n  --chat--message-line-height: 1.6;\n  --chat--message--margin-bottom: 0.75rem;\n  --chat--message--bot--background: var(--chat--color-light-shade-50);\n  --chat--message--bot--color: var(--chat--color-white);\n  --chat--message--bot--border: 1px solid var(--chat--color-light-shade-100);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-dark);\n  --chat--message--user--border: none;\n  --chat--message--pre--background: rgba(255, 255, 255, 0.05);\n  --chat--messages-list--padding: var(--chat--spacing);\n\n  --chat--toggle--size: 56px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-dark);\n  --chat--toggle--box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n\n  --chat--textarea--height: 56px;\n  --chat--textarea--max-height: 20rem;\n  --chat--input--font-size: 1rem;\n  --chat--input--border: 1px solid var(--chat--color-light-shade-100);\n  --chat--input--border-radius: var(--chat--border-radius);\n  --chat--input--padding: 0.75rem 1rem;\n  --chat--input--background: var(--chat--color-dark);\n  --chat--input--text-color: var(--chat--color-white);\n  --chat--input--line-height: 1.5;\n  --chat--input--placeholder--font-size: 1rem;\n  --chat--input--border-active: 1px solid var(--chat--color-primary);\n  --chat--input--left--panel--width: 2.5rem;\n\n  --chat--button--color: var(--chat--color-dark);\n  --chat--button--background: var(--chat--color-primary);\n  --chat--button--padding: 0.5rem 1rem;\n  --chat--button--border-radius: var(--chat--border-radius);\n  --chat--button--hover--color: var(--chat--color-dark);\n  --chat--button--hover--background: var(--chat--color-primary-shade-50);\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  --chat--input--send--button--background: var(--chat--color-primary);\n  --chat--input--send--button--color: var(--chat--color-dark);\n  --chat--input--send--button--background-hover: var(--chat--color-primary-shade-50);\n  --chat--input--send--button--color-hover: var(--chat--color-dark);\n  --chat--input--file--button--background: transparent;\n  --chat--input--file--button--color: var(--chat--color-secondary);\n  --chat--input--file--button--background-hover: var(--chat--color-light-shade-50);\n  --chat--input--file--button--color-hover: var(--chat--color-secondary-shade-50);\n  --chat--files-spacing: 0.5rem;\n\n  --chat--body--background: var(--chat--color-dark);\n  --chat--footer--background: var(--chat--color-light-shade-50);\n  --chat--footer--color: var(--chat--color-white);\n}\n\n.chat-message {\n  max-width: 60%;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  transition: all var(--chat--transition-duration) ease-in-out;\n}\n</style>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -880,
        -200
      ],
      "id": "1531e48a-b1eb-46bd-9dd1-8c53ae394d05",
      "name": "When chat message received",
      "webhookId": "6bb00d8e-5645-485f-8996-9e27bf747dc2"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/home/node/data-{{$('When chat message received').first().json.sessionId}}.py",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1160,
        -200
      ],
      "id": "c418ceb3-9cb2-41b0-acaf-7d5a5c36ac64",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "model": "hf.co/QuantFactory/TableLLM-13b-GGUF:Q8_0",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        2040,
        20
      ],
      "id": "7dd3590d-e55e-4892-b562-c5306b688e3c",
      "name": "Ollama Model1",
      "credentials": {
        "ollamaApi": {
          "id": "oEKNS3tm8YNi0WhW",
          "name": "ollama"
        }
      }
    },
    {
      "parameters": {
        "command": "=python3 /home/node/data-{{$('When chat message received').first().json.sessionId}}.py\n\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1380,
        -200
      ],
      "id": "363cb59a-a5f9-4fee-8eae-56226457c164",
      "name": "Execute python Code"
    },
    {
      "parameters": {
        "command": "=rm /home/node/data-{{ $('When chat message received').first().json.sessionId }}.py"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1560,
        -200
      ],
      "id": "00fb2187-27fd-4fa5-97c1-82971aa93c7a",
      "name": "Delete data-id.py"
    },
    {
      "parameters": {
        "jsCode": "const content = $json[\"script\"];\nconst buffer = Buffer.from(content, 'utf-8');\n// Obtener sessionId desde otro nodo\nconst sessionId = $('When chat message received').first().json.sessionId;  // ← trim aquí\nconst filename = `/home/node/data-${sessionId}.py`;\n\n\nreturn [{\n  binary: {\n    data: await this.helpers.prepareBinaryData(buffer, filename, 'text/x-python')\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        -200
      ],
      "id": "12436635-4553-4495-94d6-055bcfa7c964",
      "name": "Convert Text into binary File",
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const raw = $json.text;\n\n// Extrae solo el bloque de código entre ```python ... ```\nconst match = raw.match(/```python\\s*([\\s\\S]*?)```/);\n\nif (match) {\n  return {\n    json: {\n      script: match[1].trim()\n    }\n  };\n} else {\n  return {\n    json: {\n      script: raw.trim()\n    }\n  };\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -200
      ],
      "id": "fe17b617-cd37-4076-bf2a-44dd5a5cd8fc",
      "name": "Stop thinking",
      "executeOnce": false
    },
    {
      "parameters": {
        "model": "deepseek-r1:14b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        440,
        20
      ],
      "id": "80a72c5b-fbd2-43f6-8400-49a89a45256c",
      "name": "deepseek",
      "credentials": {
        "ollamaApi": {
          "id": "oEKNS3tm8YNi0WhW",
          "name": "ollama"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      attempt: ($json.attempt || 1) + 1\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        140
      ],
      "id": "83580c24-ca5a-4012-b700-8632c3fb2188",
      "name": "try Again"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "acfbff90-f25a-4d55-b5bb-8cb22b304454",
              "leftValue": "={{ $('Execute python Code').item.json.stdout }}",
              "rightValue": "UNKNOWN",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "83720e6f-01d8-4232-8976-80b82220b7fa",
              "leftValue": "={{ $json.attempt }}",
              "rightValue": 4,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2360,
        -200
      ],
      "id": "83033a46-89de-44f4-814c-dcd43cd12962",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=[INST]\n\nOffer a thorough and accurate solution that directly addresses the Question outlined in the [Question].\n\nIf you recibe a quetion asking for the position of a item, reply with Name, Box, Col and Row of all the items of the given table otherwise reply that you do not know. Always follow this rule.\n\n### [Table Text]\nThis is the description of the cols of the table\n{{ $('Gen promt').item.json.headers }}\n\n### [Table]\n```\n{{ $('Execute python Code').item.json.stdout }}\n```\n\n### [Question]\n{{ $('When chat message received').first().json.chatInput }}\n\n### [Solution]\nThe reply should follow the following format:\n  - If element was not found: \"UNKNOWN\".\n  - If ONE element was found: \"The elements XXXX is on the box XXX, on thhe row XXXX and on the col XXXX\"\n  - Otherwise, if there its more than one elements found, return all of them, each one with the format: \"The elements XXXX is on the box XXX, on thhe row XXXX and on the col XXXX\"\n\n\n[INST/]",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1740,
        -200
      ],
      "id": "59692ad7-5f0e-4301-b783-1cb838ec2345",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "jsCode": "return [ { \"output\": $input.first().json.stdout}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2640,
        -180
      ],
      "id": "9392b090-b4ec-418d-a818-138be83650a1",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "let attempt = 1;\n\ntry {\n  attempt = $('try Again').last().json.attempt || 1;\n} catch (e) {\n  attempt = 1;\n}\n\nreturn [{\n  json: {\n    stdout: $input.first().json.text,\n    attempt: attempt\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        -200
      ],
      "id": "59928df6-05f2-4413-83a4-267159120e0a",
      "name": "Insert count1",
      "executeOnce": true
    }
  ],
  "connections": {
    "Get All Inventory": {
      "main": [
        [
          {
            "node": "Gen promt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Inventory Headers": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gen promt": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Get All Inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Get Inventory Headers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Stop thinking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Execute python Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Execute python Code": {
      "main": [
        [
          {
            "node": "Delete data-id.py",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete data-id.py": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Text into binary File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stop thinking": {
      "main": [
        [
          {
            "node": "Convert Text into binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "deepseek": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "try Again": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "try Again",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Insert count1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert count1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Get Inventory Headers": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwYjM4MWQ0OS1iOTU2LTRkNDEtOTA5OS1lMjM3ZDIyMDNkMDYiLCJhdWQiOiIiLCJleHAiOjE3NTI0OTQ1NDAsImlhdCI6MTc1MjQ4NzM0MCwiZW1haWwiOiJ1c2VyMUB1c2VyLnVzIiwicGhvbmUiOiIiLCJhcHBfbWV0YWRhdGEiOnsicHJvdmlkZXIiOiJlbWFpbCIsInByb3ZpZGVycyI6WyJlbWFpbCJdfSwidXNlcl9tZXRhZGF0YSI6eyJlbWFpbCI6InVzZXIxQHVzZXIudXMiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInBob25lX3ZlcmlmaWVkIjpmYWxzZSwic3ViIjoiMGIzODFkNDktYjk1Ni00ZDQxLTkwOTktZTIzN2QyMjAzZDA2In0sInJvbGUiOiIiLCJhYWwiOiJhYWwxIiwiYW1yIjpbeyJtZXRob2QiOiJwYXNzd29yZCIsInRpbWVzdGFtcCI6MTc1MjQ4NzM0MH1dLCJzZXNzaW9uX2lkIjoiMWM4OTE1ZWUtZjRiYi00Yzk5LWJlYTktYTk5MDA5YWNhOTUxIiwiaXNfYW5vbnltb3VzIjpmYWxzZX0.wg-9xswjHepje4mcAoPqjmtmNMclooPr1FGmzoVxAGI",
      "refreshToken": "oqKfmf4eJKL_MBbykRqn7g"
    },
    "node:Get All Inventory": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwYjM4MWQ0OS1iOTU2LTRkNDEtOTA5OS1lMjM3ZDIyMDNkMDYiLCJhdWQiOiIiLCJleHAiOjE3NTI0OTg0NTUsImlhdCI6MTc1MjQ5MTI1NSwiZW1haWwiOiJ1c2VyMUB1c2VyLnVzIiwicGhvbmUiOiIiLCJhcHBfbWV0YWRhdGEiOnsicHJvdmlkZXIiOiJlbWFpbCIsInByb3ZpZGVycyI6WyJlbWFpbCJdfSwidXNlcl9tZXRhZGF0YSI6eyJlbWFpbCI6InVzZXIxQHVzZXIudXMiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInBob25lX3ZlcmlmaWVkIjpmYWxzZSwic3ViIjoiMGIzODFkNDktYjk1Ni00ZDQxLTkwOTktZTIzN2QyMjAzZDA2In0sInJvbGUiOiIiLCJhYWwiOiJhYWwxIiwiYW1yIjpbeyJtZXRob2QiOiJwYXNzd29yZCIsInRpbWVzdGFtcCI6MTc1MjQ5MTI1NX1dLCJzZXNzaW9uX2lkIjoiMzk2NGVkOWUtMDc5OS00OTMzLTg4NjYtYTE0ZTM1YzZhMmE4IiwiaXNfYW5vbnltb3VzIjpmYWxzZX0.DGtKAEBzy9PcoofVcoCHFt4HOBeQKwxzHHtre4pHSVg",
      "refreshToken": "c_IV5Hv4giCKhCUbRiWE0w"
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "8f7c809c-551b-42b3-88ab-fe8b24405646",
  "triggerCount": 1,
  "tags": []
}
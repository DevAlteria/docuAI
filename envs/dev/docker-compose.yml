services:
  ollama:
    volumes:
      - ollama-data-vol:/root/.ollama
    container_name: ollama
    restart: unless-stopped
    image: docker.io/ollama/ollama:0.6.1
    ports:
      - 7869:11434
    environment: #https://github.com/ollama/ollama/issues/2941
      - OLLAMA_HOST=http://0.0.0.0:11434
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_DEBUG=false
      - OLLAMA_FLASH_ATTENTION=false
      - OLLAMA_NOHISTORY=false
      - OLLAMA_NOPRUNE=false
      - OLLAMA_SCHED_SPREAD=false
      - OLLAMA_INTEL_GPU=false
      - OLLAMA_NUM_PARALLEL=0
      - OLLAMA_MAX_LOADED_MODELS=0
      - OLLAMA_MAX_QUEUE=512
      - OLLAMA_MAX_VRAM=0
      # TODO complete
      # - OLLAMA_LLM_LIBRARY=""
      # - OLLAMA_TMPDIR=/tmp
      # - CUDA_VISIBLE_DEVICES=
      # - HIP_VISIBLE_DEVICES=
      # - OLLAMA_RUNNERS_DIR=
    networks:
      - ollama-docker
# comment complete deploy key if not using nvidia gpus
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all 
              capabilities: [gpu]

  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    volumes:
      - webui-data-vol:/app/backend/data
    depends_on:
      - ollama
    ports:
      - 8080:8080
    environment: # https://docs.openwebui.com/getting-started/env-configuration#default_models
      - WEBUI_URL=localhost:8080
      - ENABLE_SIGNUP=false
      - ENABLE_LOGIN_FORM=false
      - DEFAULT_LOCALE=en
      - DEFAULT_MODELS=
      - DEFAULT_USER_ROLE=admin
      - PENDING_USER_OVERLAY_TITLE=""
      - ENV=dev
      - ENABLE_PERSISTENT_CONFIG=true
      - WEBUI_NAME=iaDoc
      - PORT=8080
      - WEBUI_AUTH=False
      - WEBUI_SECRET_KEY=t0p-s3cr3t
      # OLLAMA
      - ENABLE_OLLAMA_API=true
      - OLLAMA_BASE_URLS=http://ollama:7869 #comma separated ollama hosts
      - USE_OLLAMA_DOCKER=false #always false we have another container for this
      - K8S_FLAG=false #for helm deployment
    restart: unless-stopped
    networks:
      - ollama-docker
  n8n:
    restart: unless-stopped
    build:
      context: ../../src/n8n/
      dockerfile: Dockerfile
    image: n8n:1.0.0
    container_name: n8n
    volumes:
      - n8n-data-vol:/home/node/.n8n
      - n8n-userData-vol:/userData
      - ../../src/n8n/scripts/:/home/node/scripts
      - ../../src/n8n/config/config.json:/n8n-config.json
      - ../../src/n8n/credentials/:/credentials/
      - ../../src/n8n/workflows/:/workflows/
    networks:
      - ollama-docker
    ports:
      - 5678:5678
    environment:
      - N8N_PATH=/n8n/
      - N8N_LOG_LEVEL=debug
      - N8N_HOST=iadoc.alteria.vpn.alonsom.com
      - N8N_LISTEN_ADDRESS=0.0.0.0
      - N8N_PROTOCOL=$WEB_PROTOCOL
      - N8N_SECURE_COOKIE=false
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - WEBHOOK_URL=http://iadoc.alteria.vpn.alonsom.com/n8n/
      - N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES=true
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
  nginx:
    image: nginx:alpine-1.0.0
    build:
      context: ../../src/nginx/
      dockerfile: Dockerfile
    container_name: nginx
    restart: unless-stopped
    environment:
      - FQDN=$FQDN
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - ../../src/nginx/conf/http.d:/etc/nginx/http.d:ro
      - ../../src/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../src/nginx/public/:/var/www/html/iaDoc/:ro
    networks:
      - ollama-docker
    depends_on:
      - ollama
      - n8n
      - ollama-webui
      - appflowy_cloud
      - minio
      - appflowy_web

  minio:
    container_name: minio
    restart: on-failure
    image: minio/minio
    environment:
      - MINIO_BROWSER_REDIRECT_URL=${APPFLOWY_BASE_URL?:err}/minio
      - MINIO_ROOT_USER=${APPFLOWY_S3_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${APPFLOWY_S3_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data-vol:/data
    networks:
      - ollama-docker

  pgadmin:
    container_name: pgadmin
    restart: on-failure
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ../../src/pg-servers.json:/pgadmin4/servers.json
    networks:
      - ollama-docker
  postgres:
    container_name: postgres
    restart: on-failure
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 12
    volumes:
      - postgres-data-vol:/var/lib/postgresql/data
    networks:
      - ollama-docker

  redis:
    container_name: redis
    restart: on-failure
    image: redis
    networks:
      - ollama-docker

  gotrue:
    container_name: gotrue
    restart: on-failure
    build:
      context: ../../src/appflowy/docker/gotrue
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: "curl --fail http://127.0.0.1:9999/health || exit 1"
      interval: 5s
      timeout: 5s
      retries: 12
    image: appflowyinc/gotrue:${GOTRUE_VERSION:-latest}
    environment:
      # There are a lot of options to configure GoTrue. You can reference the example config:
      # https://github.com/supabase/auth/blob/master/example.env
      # The initial GoTrue Admin user to create, if not already exists.
      - GOTRUE_ADMIN_EMAIL=${GOTRUE_ADMIN_EMAIL}
      # The initial GoTrue Admin user password to create, if not already exists.
      # If the user already exists, the update will be skipped.
      - GOTRUE_ADMIN_PASSWORD=${GOTRUE_ADMIN_PASSWORD}
      - GOTRUE_DISABLE_SIGNUP=${GOTRUE_DISABLE_SIGNUP:-false}
      - GOTRUE_SITE_URL=appflowy-flutter://                           # redirected to AppFlowy application
      - GOTRUE_URI_ALLOW_LIST=** # adjust restrict if necessary
      - GOTRUE_JWT_SECRET=${GOTRUE_JWT_SECRET}                        # authentication secret
      - GOTRUE_JWT_EXP=${GOTRUE_JWT_EXP}
      # Without this environment variable, the createuser command will create an admin
      # with the `admin` role as opposed to `supabase_admin`
      - GOTRUE_JWT_ADMIN_GROUP_NAME=supabase_admin
      - GOTRUE_DB_DRIVER=postgres
      - API_EXTERNAL_URL=${API_EXTERNAL_URL}
      - DATABASE_URL=${GOTRUE_DATABASE_URL}
      - PORT=9999
      - GOTRUE_SMTP_HOST=${GOTRUE_SMTP_HOST}                          # e.g. smtp.gmail.com
      - GOTRUE_SMTP_PORT=${GOTRUE_SMTP_PORT}                          # e.g. 465
      - GOTRUE_SMTP_USER=${GOTRUE_SMTP_USER}                          # email sender, e.g. noreply@appflowy.io
      - GOTRUE_SMTP_PASS=${GOTRUE_SMTP_PASS}                          # email password
      - GOTRUE_MAILER_URLPATHS_CONFIRMATION=/gotrue/verify
      - GOTRUE_MAILER_URLPATHS_INVITE=/gotrue/verify
      - GOTRUE_MAILER_URLPATHS_RECOVERY=/gotrue/verify
      - GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE=/gotrue/verify
      - GOTRUE_MAILER_TEMPLATES_MAGIC_LINK=${GOTRUE_MAILER_TEMPLATES_MAGIC_LINK}
      - GOTRUE_SMTP_ADMIN_EMAIL=${GOTRUE_SMTP_ADMIN_EMAIL}                # email with admin privileges e.g. internal@appflowy.io
      - GOTRUE_SMTP_MAX_FREQUENCY=${GOTRUE_SMTP_MAX_FREQUENCY:-1ns}       # set to 1ns for running tests
      - GOTRUE_RATE_LIMIT_EMAIL_SENT=${GOTRUE_RATE_LIMIT_EMAIL_SENT:-100} # number of email sendable per minute
      - GOTRUE_MAILER_AUTOCONFIRM=${GOTRUE_MAILER_AUTOCONFIRM:-false}     # change this to true to skip email confirmation
      # Google OAuth config
      - GOTRUE_EXTERNAL_GOOGLE_ENABLED=${GOTRUE_EXTERNAL_GOOGLE_ENABLED}
      - GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID=${GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID}
      - GOTRUE_EXTERNAL_GOOGLE_SECRET=${GOTRUE_EXTERNAL_GOOGLE_SECRET}
      - GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI=${GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI}
      # GITHUB OAuth config
      - GOTRUE_EXTERNAL_GITHUB_ENABLED=${GOTRUE_EXTERNAL_GITHUB_ENABLED}
      - GOTRUE_EXTERNAL_GITHUB_CLIENT_ID=${GOTRUE_EXTERNAL_GITHUB_CLIENT_ID}
      - GOTRUE_EXTERNAL_GITHUB_SECRET=${GOTRUE_EXTERNAL_GITHUB_SECRET}
      - GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI=${GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI}
      # Discord OAuth config
      - GOTRUE_EXTERNAL_DISCORD_ENABLED=${GOTRUE_EXTERNAL_DISCORD_ENABLED}
      - GOTRUE_EXTERNAL_DISCORD_CLIENT_ID=${GOTRUE_EXTERNAL_DISCORD_CLIENT_ID}
      - GOTRUE_EXTERNAL_DISCORD_SECRET=${GOTRUE_EXTERNAL_DISCORD_SECRET}
      - GOTRUE_EXTERNAL_DISCORD_REDIRECT_URI=${GOTRUE_EXTERNAL_DISCORD_REDIRECT_URI}
      # SAML 2.0 OAuth config
      - GOTRUE_SAML_ENABLED=${GOTRUE_SAML_ENABLED}
      - GOTRUE_SAML_PRIVATE_KEY=${GOTRUE_SAML_PRIVATE_KEY}
    networks:
      - ollama-docker

  appflowy_cloud:
    container_name: appflowy_cloud
    restart: on-failure
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - APPFLOWY_ENVIRONMENT=production
      - APPFLOWY_DATABASE_URL=${APPFLOWY_DATABASE_URL}
      - APPFLOWY_REDIS_URI=${APPFLOWY_REDIS_URI}
      - APPFLOWY_GOTRUE_JWT_SECRET=${GOTRUE_JWT_SECRET}
      - APPFLOWY_GOTRUE_JWT_EXP=${GOTRUE_JWT_EXP}
      - APPFLOWY_GOTRUE_BASE_URL=${APPFLOWY_GOTRUE_BASE_URL}
      - APPFLOWY_S3_CREATE_BUCKET=${APPFLOWY_S3_CREATE_BUCKET}
      - APPFLOWY_S3_USE_MINIO=${APPFLOWY_S3_USE_MINIO}
      - APPFLOWY_S3_MINIO_URL=${APPFLOWY_S3_MINIO_URL}
      - APPFLOWY_S3_ACCESS_KEY=${APPFLOWY_S3_ACCESS_KEY}
      - APPFLOWY_S3_SECRET_KEY=${APPFLOWY_S3_SECRET_KEY}
      - APPFLOWY_S3_BUCKET=${APPFLOWY_S3_BUCKET}
      - APPFLOWY_S3_REGION=${APPFLOWY_S3_REGION}
      - APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=${APPFLOWY_S3_PRESIGNED_URL_ENDPOINT}
      - APPFLOWY_MAILER_SMTP_HOST=${APPFLOWY_MAILER_SMTP_HOST}
      - APPFLOWY_MAILER_SMTP_PORT=${APPFLOWY_MAILER_SMTP_PORT}
      - APPFLOWY_MAILER_SMTP_USERNAME=${APPFLOWY_MAILER_SMTP_USERNAME}
      - APPFLOWY_MAILER_SMTP_EMAIL=${APPFLOWY_MAILER_SMTP_EMAIL}
      - APPFLOWY_MAILER_SMTP_PASSWORD=${APPFLOWY_MAILER_SMTP_PASSWORD}
      - APPFLOWY_MAILER_SMTP_TLS_KIND=${APPFLOWY_MAILER_SMTP_TLS_KIND}
      - APPFLOWY_ACCESS_CONTROL=${APPFLOWY_ACCESS_CONTROL}
      - APPFLOWY_DATABASE_MAX_CONNECTIONS=${APPFLOWY_DATABASE_MAX_CONNECTIONS}
      - AI_SERVER_HOST=${AI_SERVER_HOST}
      - AI_SERVER_PORT=${AI_SERVER_PORT}
      - AI_OPENAI_API_KEY=${AI_OPENAI_API_KEY}
      - APPFLOWY_WEB_URL=${APPFLOWY_WEB_URL}
    build:
      context: ../../src/appflowy/.
      dockerfile: Dockerfile
      args:
        FEATURES: ""
    image: appflowyinc/appflowy_cloud:${APPFLOWY_CLOUD_VERSION:-latest}
    depends_on:
      gotrue:
        condition: service_healthy
    networks:
      - ollama-docker

  admin_frontend:
    container_name: admin_frontend
    restart: on-failure
    build:
      context: ../../src/appflowy
      dockerfile: ../../src/appflowy/admin_frontend/Dockerfile
    image: appflowyinc/admin_frontend:${APPFLOWY_ADMIN_FRONTEND_VERSION:-latest}
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ADMIN_FRONTEND_REDIS_URL=${ADMIN_FRONTEND_REDIS_URL:-redis://redis:6379}
      - ADMIN_FRONTEND_GOTRUE_URL=${ADMIN_FRONTEND_GOTRUE_URL:-http://gotrue:9999}
      - ADMIN_FRONTEND_APPFLOWY_CLOUD_URL=${ADMIN_FRONTEND_APPFLOWY_CLOUD_URL:-http://appflowy_cloud:8000}
      - ADMIN_FRONTEND_PATH_PREFIX=${ADMIN_FRONTEND_PATH_PREFIX:-}
    depends_on:
      gotrue:
        condition: service_healthy
      appflowy_cloud:
        condition: service_started
    networks:
      - ollama-docker


  ai:
    container_name: ai
    restart: on-failure
    image: appflowyinc/appflowy_ai:${APPFLOWY_AI_VERSION:-latest}
    environment:
      - OPENAI_API_KEY=${AI_OPENAI_API_KEY}
      - APPFLOWY_AI_SERVER_PORT=${AI_SERVER_PORT}
      - APPFLOWY_AI_DATABASE_URL=${AI_DATABASE_URL}
      - APPFLOWY_AI_REDIS_URL=${AI_REDIS_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ollama-docker

  appflowy_worker:
    container_name: appflowy_worker
    restart: on-failure
    image: appflowyinc/appflowy_worker:${APPFLOWY_WORKER_VERSION:-latest}
    build:
      context: ../../src/appflowy
      dockerfile: ../../src/appflowy/services/appflowy-worker/Dockerfile
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - APPFLOWY_ENVIRONMENT=production
      - APPFLOWY_WORKER_REDIS_URL=${APPFLOWY_WORKER_REDIS_URL:-redis://redis:6379}
      - APPFLOWY_WORKER_ENVIRONMENT=production
      - APPFLOWY_WORKER_DATABASE_URL=${APPFLOWY_WORKER_DATABASE_URL}
      - APPFLOWY_WORKER_DATABASE_NAME=${APPFLOWY_WORKER_DATABASE_NAME}
      - APPFLOWY_WORKER_IMPORT_TICK_INTERVAL=30
      - APPFLOWY_S3_USE_MINIO=${APPFLOWY_S3_USE_MINIO}
      - APPFLOWY_S3_MINIO_URL=${APPFLOWY_S3_MINIO_URL}
      - APPFLOWY_S3_ACCESS_KEY=${APPFLOWY_S3_ACCESS_KEY}
      - APPFLOWY_S3_SECRET_KEY=${APPFLOWY_S3_SECRET_KEY}
      - APPFLOWY_S3_BUCKET=${APPFLOWY_S3_BUCKET}
      - APPFLOWY_S3_REGION=${APPFLOWY_S3_REGION}
      - APPFLOWY_MAILER_SMTP_HOST=${APPFLOWY_MAILER_SMTP_HOST}
      - APPFLOWY_MAILER_SMTP_PORT=${APPFLOWY_MAILER_SMTP_PORT}
      - APPFLOWY_MAILER_SMTP_USERNAME=${APPFLOWY_MAILER_SMTP_USERNAME}
      - APPFLOWY_MAILER_SMTP_EMAIL=${APPFLOWY_MAILER_SMTP_EMAIL}
      - APPFLOWY_MAILER_SMTP_PASSWORD=${APPFLOWY_MAILER_SMTP_PASSWORD}
      - APPFLOWY_MAILER_SMTP_TLS_KIND=${APPFLOWY_MAILER_SMTP_TLS_KIND}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ollama-docker

  appflowy_web:
    container_name: appflowy_web
    restart: on-failure
    image: appflowyinc/appflowy_web:${APPFLOWY_WEB_VERSION:-latest}
    depends_on:
      - appflowy_cloud
    networks:
      - ollama-docker

networks:
  ollama-docker:
    driver: bridge
    name: ollama-docker
    external: false

volumes:
  webui-data-vol:
    driver: local
    name: webui-data-vol
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/envs/dev/data/webui-data-vol
  ollama-data-vol:
    driver: local
    name: ollama-data-vol
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/envs/dev/data/ollama-data-vol
  n8n-data-vol:
    driver: local
    name: n8n-data-vol
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/envs/dev/data/n8n-data-vol
  n8n-userData-vol:
    driver: local
    name: n8n-userData-vol
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/envs/dev/data/n8n-userData-vol
  minio-data-vol:
    driver: local
    name: minio-data-vol
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/envs/dev/data/minio-data-vol
  postgres-data-vol:
    driver: local
    name: postgres-data-vol
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/envs/dev/data/postgres-data-vol

